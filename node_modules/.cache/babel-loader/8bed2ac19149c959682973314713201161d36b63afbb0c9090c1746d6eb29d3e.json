{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nexport default {\n  name: \"HelloWorld\"\n};\n(function (global) {\n  console.log(global);\n  var module = global.noise = {};\n  function Grad(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  Grad.prototype.dot2 = function (x, y) {\n    return this.x * x + this.y * y;\n  };\n  Grad.prototype.dot3 = function (x, y, z) {\n    return this.x * x + this.y * y + this.z * z;\n  };\n  var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n  var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\n  // To remove the need for index wrapping, double the permutation table length\n  var perm = new Array(512);\n  var gradP = new Array(512);\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  module.seed = function (seed) {\n    if (seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n    seed = Math.floor(seed);\n    if (seed < 256) {\n      seed |= seed << 8;\n    }\n    for (var i = 0; i < 256; i++) {\n      var v;\n      if (i & 1) {\n        v = p[i] ^ seed & 255;\n      } else {\n        v = p[i] ^ seed >> 8 & 255;\n      }\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  };\n  module.seed(0);\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n  var F2 = 0.5 * (Math.sqrt(3) - 1);\n  var G2 = (3 - Math.sqrt(3)) / 6;\n  var F3 = 1 / 3;\n  var G3 = 1 / 6;\n  // 2D simplex noise\n  module.simplex2 = function (xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var t = (i + j) * G2;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin - j + t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if (x0 > y0) {\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1 = 1;\n      j1 = 0;\n    } else {\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1 = 0;\n      j1 = 1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n    var gi0 = gradP[i + perm[j]];\n    var gi1 = gradP[i + i1 + perm[j + j1]];\n    var gi2 = gradP[i + 1 + perm[j + 1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n  };\n  // 3D simplex noise\n  module.simplex3 = function (xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var t = (i + j + k) * G3;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin - j + t;\n    var z0 = zin - k + t;\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255;\n    j &= 255;\n    k &= 255;\n    var gi0 = gradP[i + perm[j + perm[k]]];\n    var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n    var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n    var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\n    // Calculate the contribution from the four corners\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3);\n  };\n  // ##### Perlin noise stuff\n  function fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n  function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  }\n  // 2D Perlin Noise\n  module.perlin2 = function (x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n      Y = Math.floor(y);\n    // Get relative xy coordinates of point within that cell\n    x = x - X;\n    y = y - Y;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255;\n    Y = Y & 255;\n    // Calculate noise contributions from each of the four corners\n    var n00 = gradP[X + perm[Y]].dot2(x, y);\n    var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n    var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n    var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\n    // Compute the fade curve value for x\n    var u = fade(x);\n    // Interpolate the four results\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n  };\n  // 3D Perlin Noise\n  module.perlin3 = function (x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n      Y = Math.floor(y),\n      Z = Math.floor(z);\n    // Get relative xyz coordinates of point within that cell\n    x = x - X;\n    y = y - Y;\n    z = z - Z;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255;\n    // Calculate noise contributions from each of the eight corners\n    var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n    var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n    var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n    var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n    var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n    var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n    var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n    var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);\n    // Compute the fade curve value for x, y, z\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z);\n    // Interpolate\n    return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v);\n  };\n})(this);\n//effective animation code\nvar wWidth = window.innerWidth;\nvar wHeight = window.innerHeight;\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera(75, wWidth / wHeight, 0.01, 1000);\ncamera.position.x = 0;\ncamera.position.y = 10; // 0\ncamera.position.z = 20; // 40\ncamera.lookAt(new THREE.Vector3(0, 0, 0));\nvar renderer = new THREE.WebGLRenderer({\n  alpha: true\n});\nrenderer.setClearColor(0x000000, 0);\ndocument.getElementById('sec-graphical-intro').appendChild(renderer.domElement);\n//Animation parameters\nvar rows = 100;\nvar cols = 200;\nvar separationX = 1;\nvar separationZ = 1;\nvar perlinScale = 0.02;\nvar waveSpeed = 0.1;\nvar waveHeight = 12;\nvar FPS = 45;\nvar startTime = new Date().getTime();\nvar particles = 0;\nvar count = 0;\nnoise.seed(Math.random());\nfunction createGeometry() {\n  var numParticles = cols * rows;\n  var positions = new Float32Array(numParticles * 3);\n  var i = 0;\n  var j = 0;\n  for (var ix = 0; ix < cols; ix++) {\n    for (var iy = 0; iy < rows; iy++) {\n      positions[i] = ix * separationX - cols * separationX / 2; // x\n      positions[i + 1] = 0; // y\n      positions[i + 2] = iy * separationZ - rows * separationZ / 2; // z\n      i += 3;\n      j++;\n    }\n  }\n  var geometry = new THREE.BufferGeometry();\n  geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n  // geometry.dynamic = true;\n  // geometry.translate(-100, 0, -25);\n  return geometry;\n}\nvar geo = createGeometry();\nvar material = new THREE.ShaderMaterial({\n  uniforms: {\n    \"color1\": {\n      type: \"c\",\n      value: new THREE.Color(0x2753c9)\n    },\n    \"color2\": {\n      type: \"c\",\n      value: new THREE.Color(0x1dcdc0)\n    }\n  },\n  vertexShader: `\n      varying vec2 vUv;\n      varying vec4 pos;\n      void main() {\n        vUv = uv;\n        gl_PointSize = 5.0;\n        pos = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n        gl_Position = pos;\n      }\n    `,\n  fragmentShader: `\n      uniform vec3 color1;\n      uniform vec3 color2;\n      varying vec2 vUv;\n      varying vec4 pos;\n            void main() {\n                if ( length( gl_PointCoord - vec2( 0.5, 0.5 ) ) > 0.475 ) discard;\n                gl_FragColor = vec4(mix(color1, color2, smoothstep(-20.0, 20.0, pos.x)), 1.0);\n            }\n    `\n});\nparticles = new THREE.Points(geo, material);\nscene.add(particles);\nfunction perlinAnimate() {\n  var curTime = new Date().getTime();\n  var positions = particles.geometry.attributes.position.array;\n  var i = 0;\n  var j = 0;\n  for (var ix = 0; ix < cols; ix++) {\n    for (var iy = 0; iy < rows; iy++) {\n      pX = ix * perlinScale + (curTime - startTime) / 1000 * waveSpeed;\n      pZ = iy * perlinScale + (curTime - startTime) / 1000 * waveSpeed;\n      positions[i + 1] = noise.simplex2(pX, pZ) * waveHeight;\n      i += 3;\n    }\n  }\n  particles.geometry.attributes.position.needsUpdate = true;\n  count += 0.1;\n}\nfunction render() {\n  renderer.render(scene, camera);\n}\nfunction animate() {\n  perlinAnimate();\n  render();\n  window.setTimeout(function () {\n    requestAnimationFrame(animate);\n  }, 1000 / FPS);\n}\nfunction refreshCanvasState() {\n  wWidth = window.innerWidth;\n  wHeight = window.innerHeight;\n  camera.aspect = wWidth / wHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(wWidth, wHeight);\n}\n//EVENTS && INTERACTIONS\nwindow.addEventListener('resize', refreshCanvasState, false);\nanimate();\nrefreshCanvasState();\naddEvent(document, \"keypress\", function (e) {\n  e = e || window.event;\n  // use e.keyCode\n  console.log(e.keyCode);\n});\nfunction addEvent(element, eventName, callback) {\n  if (element.addEventListener) {\n    element.addEventListener(eventName, callback, false);\n  } else if (element.attachEvent) {\n    element.attachEvent(\"on\" + eventName, callback);\n  } else {\n    element[\"on\" + eventName] = callback;\n  }\n}","map":{"version":3,"names":["name","global","console","log","module","noise","Grad","x","y","z","prototype","dot2","dot3","grad3","p","perm","Array","gradP","seed","Math","floor","i","v","F2","sqrt","G2","F3","G3","simplex2","xin","yin","n0","n1","n2","s","j","t","x0","y0","i1","j1","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","n3","k","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","gi3","t3","fade","lerp","a","b","perlin2","X","Y","n00","n01","n10","n11","u","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111","w","wWidth","window","innerWidth","wHeight","innerHeight","scene","THREE","Scene","camera","PerspectiveCamera","position","lookAt","Vector3","renderer","WebGLRenderer","alpha","setClearColor","document","getElementById","appendChild","domElement","rows","cols","separationX","separationZ","perlinScale","waveSpeed","waveHeight","FPS","startTime","Date","getTime","particles","count","random","createGeometry","numParticles","positions","Float32Array","ix","iy","geometry","BufferGeometry","addAttribute","BufferAttribute","geo","material","ShaderMaterial","uniforms","type","value","Color","vertexShader","fragmentShader","Points","add","perlinAnimate","curTime","attributes","array","pX","pZ","needsUpdate","render","animate","setTimeout","requestAnimationFrame","refreshCanvasState","aspect","updateProjectionMatrix","setSize","addEventListener","addEvent","e","event","keyCode","element","eventName","callback","attachEvent"],"sources":["src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"main\">\n    <div class=\"left\">\n      <div class=\"left__title\">\n        Everything complicated is simple, if we take care of the code\n      </div>\n      <div class=\"left__btn\">View our works</div>\n    </div>\n    <div class=\"right\">\n      <img src=\"@/assets/monitor/monitor.png\" alt=\"monitor\" />\n      <div class=\"right__content\">\n        <img src=\"@/assets/monitor/monitor_img_1.png\" alt=\"monitor img\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"HelloWorld\",\n};\n\n(function(global){\n  console.log(global);\n  var module = global.noise = {};\n  function Grad(x, y, z) {\n    this.x = x; this.y = y; this.z = z;\n  }\n    Grad.prototype.dot2 = function(x, y) {\n    return this.x*x + this.y*y;\n  };\n  Grad.prototype.dot3 = function(x, y, z) {\n    return this.x*x + this.y*y + this.z*z;\n  };\n  var grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n               new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n               new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\n\n  var p = [151,160,137,91,90,15,\n  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n  190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n  88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n  102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n  135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n  223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n  129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n  251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n  49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\n  // To remove the need for index wrapping, double the permutation table length\n  var perm = new Array(512);\n  var gradP = new Array(512);\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  module.seed = function(seed) {\n    if(seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n    seed = Math.floor(seed);\n    if(seed < 256) {\n      seed |= seed << 8;\n    }\n    for(var i = 0; i < 256; i++) {\n      var v;\n      if (i & 1) {\n        v = p[i] ^ (seed & 255);\n      } else {\n        v = p[i] ^ ((seed>>8) & 255);\n      }\n\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  };\n  module.seed(0);\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n  var F2 = 0.5*(Math.sqrt(3)-1);\n  var G2 = (3-Math.sqrt(3))/6;\n  var F3 = 1/3;\n  var G3 = 1/6;\n  // 2D simplex noise\n  module.simplex2 = function(xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin)*F2; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var t = (i+j)*G2;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1=1; j1=0;\n    } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1=0; j1=1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n    var gi0 = gradP[i+perm[j]];\n    var gi1 = gradP[i+i1+perm[j+j1]];\n    var gi2 = gradP[i+1+perm[j+1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0*x0-y0*y0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n  };\n  // 3D simplex noise\n  module.simplex3 = function(xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin+zin)*F3; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var k = Math.floor(zin+s);\n    var t = (i+j+k)*G3;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    var z0 = zin-k+t;\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if(x0 >= y0) {\n      if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n      else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n      else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n    } else {\n      if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n      else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n      else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255;\n    j &= 255;\n    k &= 255;\n    var gi0 = gradP[i+   perm[j+   perm[k   ]]];\n    var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n    var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n    var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n    // Calculate the contribution from the four corners\n    var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n    var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n    var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\n    if(t3<0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3);\n  };\n  // ##### Perlin noise stuff\n  function fade(t) {\n    return t*t*t*(t*(t*6-15)+10);\n  }\n  function lerp(a, b, t) {\n    return (1-t)*a + t*b;\n  }\n  // 2D Perlin Noise\n  module.perlin2 = function(x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y);\n    // Get relative xy coordinates of point within that cell\n    x = x - X; y = y - Y;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255;\n    // Calculate noise contributions from each of the four corners\n    var n00 = gradP[X+perm[Y]].dot2(x, y);\n    var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n    var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n    var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n    // Compute the fade curve value for x\n    var u = fade(x);\n    // Interpolate the four results\n    return lerp(\n        lerp(n00, n10, u),\n        lerp(n01, n11, u),\n       fade(y));\n  };\n  // 3D Perlin Noise\n  module.perlin3 = function(x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n    // Get relative xyz coordinates of point within that cell\n    x = x - X; y = y - Y; z = z - Z;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255; Z = Z & 255;\n    // Calculate noise contributions from each of the eight corners\n    var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n    var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n    var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n    var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n    var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n    var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n    var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n    var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n    // Compute the fade curve value for x, y, z\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z);\n    // Interpolate\n    return lerp(\n        lerp(\n          lerp(n000, n100, u),\n          lerp(n001, n101, u), w),\n        lerp(\n          lerp(n010, n110, u),\n          lerp(n011, n111, u), w),\n       v);\n  };\n})(this);\n//effective animation code\nvar wWidth = window.innerWidth;\nvar wHeight = window.innerHeight;\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera(75, wWidth / wHeight, 0.01, 1000);\ncamera.position.x = 0;\ncamera.position.y = 10; // 0\ncamera.position.z = 20; // 40\ncamera.lookAt(new THREE.Vector3(0, 0, 0));\nvar renderer = new THREE.WebGLRenderer({\n  alpha: true\n});\nrenderer.setClearColor(0x000000, 0);\ndocument.getElementById('sec-graphical-intro').appendChild(renderer.domElement);\n//Animation parameters\nvar rows = 100;\nvar cols = 200;\nvar separationX = 1;\nvar separationZ = 1;\nvar perlinScale = 0.02;\nvar waveSpeed = 0.1;\nvar waveHeight = 12;\nvar FPS = 45;\nvar startTime = new Date().getTime();\nvar particles = 0;\nvar count = 0;\nnoise.seed(Math.random());\nfunction createGeometry() {\n  var numParticles = cols * rows;\n  var positions = new Float32Array( numParticles * 3 );\n  var i = 0\n  var j = 0;\n  for ( var ix = 0; ix < cols; ix ++ ) {\n    for ( var iy = 0; iy < rows; iy ++ ) {\n      positions[i] = ix * separationX - ( ( cols * separationX ) / 2 ); // x\n      positions[i + 1] = 0; // y\n      positions[i + 2] = iy * separationZ - ( ( rows * separationZ ) / 2 ); // z\n      i += 3;\n      j ++;\n    }\n  }\n  var geometry = new THREE.BufferGeometry();\n  geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n  // geometry.dynamic = true;\n  // geometry.translate(-100, 0, -25);\n  return geometry;\n}\nvar geo = createGeometry();\nvar material = new THREE.ShaderMaterial( {\n    uniforms: {\n      \"color1\": {\n        type : \"c\",\n        value: new THREE.Color(0x2753c9)\n      },\n      \"color2\": {\n        type : \"c\",\n        value: new THREE.Color(0x1dcdc0)\n      }\n    },\n    vertexShader: `\n      varying vec2 vUv;\n      varying vec4 pos;\n      void main() {\n        vUv = uv;\n        gl_PointSize = 5.0;\n        pos = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n        gl_Position = pos;\n      }\n    `,\n    fragmentShader: `\n      uniform vec3 color1;\n      uniform vec3 color2;\n      varying vec2 vUv;\n      varying vec4 pos;\n            void main() {\n                if ( length( gl_PointCoord - vec2( 0.5, 0.5 ) ) > 0.475 ) discard;\n                gl_FragColor = vec4(mix(color1, color2, smoothstep(-20.0, 20.0, pos.x)), 1.0);\n            }\n    `\n  });\nparticles = new THREE.Points(geo, material);\nscene.add(particles);\nfunction perlinAnimate() {\n  var curTime = new Date().getTime();\n  var positions = particles.geometry.attributes.position.array;\n  var i = 0\n  var j = 0;\n  for ( var ix = 0; ix < cols; ix ++ ) {\n    for ( var iy = 0; iy < rows; iy ++ ) {\n      pX = (ix * perlinScale) + ((curTime - startTime) / 1000) * waveSpeed;\n      pZ = (iy * perlinScale) + ((curTime - startTime) / 1000) * waveSpeed;\n      positions[ i + 1 ] = (noise.simplex2(pX, pZ)) * waveHeight;\n      i += 3;\n    }\n  }\n  particles.geometry.attributes.position.needsUpdate = true;\n  count += 0.1;\n}\nfunction render() {\n  renderer.render(scene, camera);\n}\nfunction animate() {\n  perlinAnimate();\n  render();\n  window.setTimeout(function() {\n    requestAnimationFrame(animate);\n  }, 1000 / FPS);\n}\nfunction refreshCanvasState() {\n  wWidth = window.innerWidth;\n  wHeight = window.innerHeight;\n  camera.aspect = wWidth / wHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(wWidth, wHeight);\n}\n//EVENTS && INTERACTIONS\nwindow.addEventListener('resize', refreshCanvasState, false);\nanimate();\nrefreshCanvasState();\naddEvent(document, \"keypress\", function(e) {\n  e = e || window.event;\n  // use e.keyCode\n  console.log(e.keyCode);\n});\nfunction addEvent(element, eventName, callback) {\n  if (element.addEventListener) {\n    element.addEventListener(eventName, callback, false);\n  } else if (element.attachEvent) {\n    element.attachEvent(\"on\" + eventName, callback);\n  } else {\n    element[\"on\" + eventName] = callback;\n  }\n}\n</script>\n<style scoped lang=\"scss\">\n.main {\n  display: flex;\n  height: 980px;\n  justify-content: space-between;\n  background-image: url(\"@/assets/Vector.png\");\n  background-position: 0 32px;\n  .left {\n    align-self: center;\n    margin-left: 191px;\n    position: relative;\n    height: 100%;\n    .left__title {\n      font-size: 70px;\n      font-weight: 800;\n      color: #004ca9;\n      width: 600px;\n      position: absolute;\n      top: 239px;\n    }\n    .left__btn {\n      position: relative;\n      top: 636px;\n      font-size: 16px;\n      font-weight: 600;\n      color: #ffffff;\n      width: 244px;\n      height: 59px;\n      background-color: #3777f3;\n      border-radius: 50px;\n      padding: 20px 50px;\n      text-transform: uppercase;\n    }\n  }\n  .right {\n    align-self: flex-end;\n    position: relative;\n    .right__content {\n      position: absolute;\n      top: 52px;\n      right: 0;\n    }\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}